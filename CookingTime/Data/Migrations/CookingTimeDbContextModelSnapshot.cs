// <auto-generated />
using System;
using CookingTime.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CookingTime.Data.Migrations
{
    [DbContext(typeof(CookingTimeDbContext))]
    partial class CookingTimeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CookingTime.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Тази торта е просто възхитителна! Искрени благодарности и поздравления. Рецептата е лесна за приготвяне и резултатът е впечатляващ. Сигурен съм, че всеки, който я опита, ще се влюби в нея!",
                            CreatedOn = new DateTime(2024, 4, 10, 19, 19, 20, 722, DateTimeKind.Local).AddTicks(6939),
                            RecipeId = 1,
                            UserId = "67b9512c-16b9-4293-aa73-7d4206203c66"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Абсолютно вълшебна торта! Препоръчвам я на всеки, който обича ягодите и сладките изкушения. Изключително лесна за приготвяне и резултатът е просто невероятен. Гарантирано удоволствие за сетивата и радост за всеки вкус!",
                            CreatedOn = new DateTime(2024, 4, 8, 19, 19, 20, 722, DateTimeKind.Local).AddTicks(6953),
                            RecipeId = 1,
                            UserId = "1389cefe-47bb-4045-bab1-9beee3459af6"
                        },
                        new
                        {
                            Id = 3,
                            Content = "За съжаление, джоланът ми се получи сух и недопечен, въпреки че следвах всички стъпки от рецептата... Не одобрявам!",
                            CreatedOn = new DateTime(2024, 4, 12, 19, 19, 20, 722, DateTimeKind.Local).AddTicks(6964),
                            RecipeId = 2,
                            UserId = "67b9512c-16b9-4293-aa73-7d4206203c66"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Тази рецепта за свински джолан в гювеч беше чудесна! Комбинацията от мед и масло придаде изключителен вкус на ястието. Готвенето изискваше време, но резултатът си струваше всеки момент. Определено препоръчвам!",
                            CreatedOn = new DateTime(2024, 4, 6, 19, 19, 20, 722, DateTimeKind.Local).AddTicks(6969),
                            RecipeId = 2,
                            UserId = "1389cefe-47bb-4045-bab1-9beee3459af6"
                        });
                });

            modelBuilder.Entity("CookingTime.Data.Models.Favorite", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RecipeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");

                    b.HasData(
                        new
                        {
                            RecipeId = 1,
                            UserId = "67b9512c-16b9-4293-aa73-7d4206203c66"
                        },
                        new
                        {
                            RecipeId = 2,
                            UserId = "67b9512c-16b9-4293-aa73-7d4206203c66"
                        },
                        new
                        {
                            RecipeId = 1,
                            UserId = "1389cefe-47bb-4045-bab1-9beee3459af6"
                        },
                        new
                        {
                            RecipeId = 2,
                            UserId = "1389cefe-47bb-4045-bab1-9beee3459af6"
                        });
                });

            modelBuilder.Entity("CookingTime.Data.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Portions")
                        .HasColumnType("float");

                    b.Property<double>("PreparationTime")
                        .HasColumnType("float");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Първата стъпка от рецептата за свежа ягодова торта е подготовката на продуктите за блата. Пресявате брашното, заедно с бакпулвера, содата и солта. С помощта на миксер разбивате яйцата, заедно със захарта. Добавете ванилиите, олиото и киселото мляко и отново разбийте. Добавете ягодово пюре и ягодовото сладко. Малко по малко при непрекъснато бъркане добавете сухите съставки и разбийте до хомогенна смес.\n                        В правоъгълна форма за печене поставете хартия за печене, изсипете сместа и печете в предварително загрята на 180 градуса фурна за около 30 минути. Блатът е изпечен, когато бучнейки го с клечка за зъби, тя излезе суха. Извадете блата от фурната и го оставете да изстине напълно.\n                        В купа разбийте крема сиренето, след което към него добавете пресята пудра захар, а след това добавете и заквасената сметана. Разбийте до хомогенна смес. Разпределете крема върху блата, когато вече е съвсем изстинал. Украсете с нарязаните ягоди.",
                            CreatedOn = new DateTime(2024, 4, 13, 19, 19, 20, 722, DateTimeKind.Local).AddTicks(6585),
                            ImageUrl = "\\img\\uploads\\recipes\\cake.jpg",
                            Ingredients = "4 броя яйца, 1/2 чаена чаша сладко, 500 грама крема сирене, 1/3 чаена чаша пудра захар, 1 чаена чаша ягоди, 1/2 броя лайм / зелен лимон",
                            Portions = 16.0,
                            PreparationTime = 1.0,
                            ShortDescription = "Потопете се във вълшебството на това сладко изкушение, което събира в себе си свежестта на сочните ягодите и кадифената текстура на крема сирене. Вкусово пътешествие, което ще ви омагьосва с всяка хапка!",
                            Title = "Свежа торта с ягоди",
                            Type = 4,
                            UserId = "67b9512c-16b9-4293-aa73-7d4206203c66"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Първата стъпка от рецептата  за свински джолан в гювеч е изборът и подготовката на джолана. Избирате хубав, не много голям свински джолан, като най-добре е да посетите близкия месарски магазин, а да не залагате на джолан от витрината на големите вериги. Измивате добре джолана, добсушавате го, след което го обтривате старателно от всички страни със сол.\n                        В гювеч слагате водата и поставяте след това джолана. Следвайте тази последователност на поставяне на съставките в гювеча, защото ако залеете джолана с течноститта, то ще отмиете солта. Слагате гювеча (винаги!) в студена фурна, за да не се пукне. Първаночално включвате на 200 градуса, като след около 30 минути намалявате на 160 градуса и забравяте за джолана за около 4 часа, като на всеки 40-50 минути изваждате, отваряте и обливате печащия се джолан със соса.\n                        След около 4 часа във фурната, изваждате джолана и в малка купичка разбърквате кравето масло, меда и 1-2 супени лъжици от соса. С тази смес намазвате джолана и оставяте за още около 20-30 минути във фурната.\n                        Гювечът е един вълшебен съд! Той има способността да превръща и най-простичките съставки в истински деликатеси! \n                        ДОБЪР АПЕТИТ!",
                            CreatedOn = new DateTime(2024, 4, 13, 19, 19, 20, 722, DateTimeKind.Local).AddTicks(6812),
                            ImageUrl = "\\img\\uploads\\recipes\\pork.jpg",
                            Ingredients = "1 брой свински джолан, 2 супени лъжици мед, 50 грама краве масло",
                            Portions = 8.0,
                            PreparationTime = 6.5,
                            ShortDescription = "Открийте магията на гювеча с тази рецепта за сочен свински джолан, обогатен с нежността на мед и краве масло. Насладете се на този вълшебен опит и позволете на вкусовете да ви отведат на пътешествие из вкусовата галактика!",
                            Title = "Свински джолан в гювеч",
                            Type = 3,
                            UserId = "67b9512c-16b9-4293-aa73-7d4206203c66"
                        });
                });

            modelBuilder.Entity("CookingTime.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1389cefe-47bb-4045-bab1-9beee3459af6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf36ca41-8ab2-483a-b6ee-92ad04fc74c4",
                            Email = "admin@cookingtime.com",
                            EmailConfirmed = true,
                            FirstName = "Петър",
                            ImageUrl = "\\img\\uploads\\profiles\\default-image.jpg",
                            LastName = "Стоянов",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@COOKINGTIME.COM",
                            NormalizedUserName = "ADMIN@COOKINGTIME.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFbuZ9x9P1zvj1SsETlLHJst3dsON3Eh1FVd6XB/YMg0eRfvSViV3eNaocdRaVTWIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2e81817-6574-4649-a415-33e0f0785a21",
                            TwoFactorEnabled = false,
                            UserName = "admin@cookingtime.com"
                        },
                        new
                        {
                            Id = "67b9512c-16b9-4293-aa73-7d4206203c66",
                            AccessFailedCount = 0,
                            Bio = "Приветствайте гурмето в мен! Аз съм готвач със сърце и страст. Обичам да създавам кулинарни шедьоври, като моят специалитет е италиански пастичио с таен сос от баба. Също така, в профила ми ще откриете любими рецепти за сладкиши. С години опит в кухнята, аз не просто готвя, а създавам вкусове и моменти. Вдъхновете се от моите рецепти и дайте на вкусовете да ви отведат на пътешествие! 🍝🔪",
                            ConcurrencyStamp = "1a6865f2-5149-4ae3-b5da-0b0591302881",
                            Email = "user@cookingtime.com",
                            EmailConfirmed = true,
                            FirstName = "Ивана",
                            ImageUrl = "\\img\\uploads\\profiles\\ivana.jpg",
                            LastName = "Петрова",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@COOKINGTIME.COM",
                            NormalizedUserName = "USER@COOKINGTIME.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJUFEGuTaGinU3YIt16AlQGs2NNSglcwnQsVTMIoaFSRfMMYytn6qPvt2CFUHe4X9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc08febc-f760-4c8c-9816-27d35604a437",
                            TwoFactorEnabled = false,
                            UserName = "user@cookingtime.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c2a7c3f4-31c5-4df1-be95-825cf5aef17a",
                            ConcurrencyStamp = "c2a7c3f4-31c5-4df1-be95-825cf5aef17a",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1389cefe-47bb-4045-bab1-9beee3459af6",
                            RoleId = "c2a7c3f4-31c5-4df1-be95-825cf5aef17a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CookingTime.Data.Models.Comment", b =>
                {
                    b.HasOne("CookingTime.Data.Models.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CookingTime.Data.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CookingTime.Data.Models.Favorite", b =>
                {
                    b.HasOne("CookingTime.Data.Models.Recipe", "Recipe")
                        .WithMany("Favorites")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CookingTime.Data.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CookingTime.Data.Models.Recipe", b =>
                {
                    b.HasOne("CookingTime.Data.Models.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CookingTime.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CookingTime.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookingTime.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CookingTime.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CookingTime.Data.Models.Recipe", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("CookingTime.Data.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
